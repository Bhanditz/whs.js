{"version":3,"sources":["meshes/Parametric.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,U;;;AACJ,wBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,oHACjB,MADiB,EACT,YADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,UADsB,kBACf,CAAE,CADa;;AAEtB,cAAQ,EAFc;AAGtB,cAAQ;AAHc,KAAxB;;AAMA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAZsB;AAaxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,WAAvB,GAAqC,MAAM,IADpD;UAEE,qHAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,sBAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,OAAK,aAAL,CAAmB,MAAnB,CADe,EAEf,QAFe,EAGf,OAAO,IAHQ,CAAjB;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,aAAO,IAAI,MAAM,kBAAV,CACL,OAAO,QAAP,CAAgB,IADX,EAEL,OAAO,QAAP,CAAgB,MAFX,EAGL,OAAO,QAAP,CAAgB,MAHX,CAAP;AAKD;;;4BA0BO;AACN,aAAO,IAAI,UAAJ,CAAe,EAAC,OAAO,KAAR,EAAf,EAA+B,IAA/B,CAAoC,IAApC,CAAP;AACD;;;sBA1BU,G,EAAK;AACd,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,MAAM,GAAP,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEY;AACX,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,IAAvC;AACD;;;sBAEY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;;;QAQD,U,GAAA,U","file":"Parametric.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Parametric extends Shape {\n  constructor(params = {}) {\n    super(params, 'parametric');\n\n    extend(params.geometry, {\n      func() {},\n      slices: 10,\n      stacks: 10\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConcaveMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        this.buildGeometry(params),\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  buildGeometry(params = {}) {\n    return new THREE.ParametricGeometry(\n      params.geometry.func,\n      params.geometry.slices,\n      params.geometry.stacks\n    );\n  }\n\n  set G_func(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {func: val}}));\n  }\n\n  get G_func() {\n    return this.native.geometry.parameters.func;\n  }\n\n  set G_slices(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {slices: val}}));\n  }\n\n  get G_slices() {\n    return this.native.geometry.parameters.slices;\n  }\n\n  set G_stacks(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {stacks: val}}));\n  }\n\n  get G_stacks() {\n    return this.native.geometry.parameters.stacks;\n  }\n\n  clone() {\n    return new Parametric({build: false}).copy(this);\n  }\n}\n\nexport {\n  Parametric\n};\n"]}