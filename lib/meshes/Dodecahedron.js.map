{"version":3,"sources":["meshes/Dodecahedron.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,Y;;;AACJ,0BAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,8GACjB,MADiB,EACT,cADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,CADc;AAEtB,cAAQ;AAFc,KAAxB;;AAKA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAXsB;AAYxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;AAAA,UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,UAAvB,GAAoC,MAAM,IADnD;AAAA,UAEE,+GAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,OAAK,aAAL,CAAmB,MAAnB,CADe,EAEf,QAFe,EAGf,OAAO,IAHQ,CAAjB;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,aAAO,IAAI,MAAM,oBAAV,CACL,OAAO,QAAP,CAAgB,MADX,EAEL,OAAO,QAAP,CAAgB,MAFX,CAAP;AAID;;;4BAkBO;AACN,aAAO,IAAI,YAAJ,CAAiB,EAAC,OAAO,KAAR,EAAjB,EAAiC,IAAjC,CAAsC,IAAtC,CAAP;AACD;;;sBAlBY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;;;QAQD,Y,GAAA,Y","file":"Dodecahedron.js","sourcesContent":["import * as THREE from 'three';\r\nimport Physijs from '../physics/physi.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend} from '../extras/api';\r\n\r\nclass Dodecahedron extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'dodecahedron');\r\n\r\n    extend(params.geometry, {\r\n      radius: 1,\r\n      detail: 0\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const _scope = this,\r\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh,\r\n      material = super._initMaterial(params.material);\r\n\r\n    return new Promise((resolve) => {\r\n      _scope.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        params.mass\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    return new THREE.DodecahedronGeometry(\r\n      params.geometry.radius,\r\n      params.geometry.detail\r\n    );\r\n  }\r\n\r\n  set G_radius(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\r\n  }\r\n\r\n  get G_radius() {\r\n    return this.native.geometry.parameters.radius;\r\n  }\r\n\r\n  set G_detail(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {detail: val}}));\r\n  }\r\n\r\n  get G_detail() {\r\n    return this.native.geometry.parameters.detail;\r\n  }\r\n\r\n  clone() {\r\n    return new Dodecahedron({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Dodecahedron\r\n};\r\n"]}