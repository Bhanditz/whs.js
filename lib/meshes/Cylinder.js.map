{"version":3,"sources":["meshes/Cylinder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,Q;;;AACJ,sBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,kHACjB,MADiB,EACT,UADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,iBAAW,CADW;AAEtB,oBAAc,CAFQ;AAGtB,cAAQ,CAHc;AAItB,sBAAgB;AAJM,KAAxB;;AAOA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAbsB;AAcxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,YAAvB,GAAsC,MAAM,IADrD;UAEE,mHAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,sBAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,OAAK,aAAL,CAAmB,MAAnB,CADe,EAEf,QAFe,EAGf,OAAO,IAHQ,CAAjB;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,aAAO,IAAI,MAAM,gBAAV,CACL,OAAO,QAAP,CAAgB,SADX,EAEL,OAAO,QAAP,CAAgB,YAFX,EAGL,OAAO,QAAP,CAAgB,MAHX,EAIL,OAAO,QAAP,CAAgB,cAJX,CAAP;AAMD;;;4BAkCO;AACN,aAAO,IAAI,QAAJ,CAAa,EAAC,OAAO,KAAR,EAAb,EAA6B,IAA7B,CAAkC,IAAlC,CAAP;AACD;;;sBAlCe,G,EAAK;AACnB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,WAAW,GAAZ,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEiB;AAChB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,SAAvC;AACD;;;sBAEkB,G,EAAK;AACtB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,cAAc,GAAf,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEoB;AACnB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,YAAvC;AACD;;;sBAEY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEoB,G,EAAK;AACxB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,gBAAgB,GAAjB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEsB;AACrB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,cAAvC;AACD;;;;;QAQD,Q,GAAA,Q","file":"Cylinder.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Cylinder extends Shape {\n  constructor(params = {}) {\n    super(params, 'cylinder');\n\n    extend(params.geometry, {\n      radiusTop: 0,\n      radiusBottom: 1,\n      height: 1,\n      radiusSegments: 32\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.CylinderMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        this.buildGeometry(params),\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  buildGeometry(params = {}) {\n    return new THREE.CylinderGeometry(\n      params.geometry.radiusTop,\n      params.geometry.radiusBottom,\n      params.geometry.height,\n      params.geometry.radiusSegments\n    );\n  }\n\n  set G_radiusTop(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radiusTop: val}}));\n  }\n\n  get G_radiusTop() {\n    return this.native.geometry.parameters.radiusTop;\n  }\n\n  set G_radiusBottom(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radiusBottom: val}}));\n  }\n\n  get G_radiusBottom() {\n    return this.native.geometry.parameters.radiusBottom;\n  }\n\n  set G_height(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {height: val}}));\n  }\n\n  get G_height() {\n    return this.native.geometry.parameters.height;\n  }\n\n  set G_radiusSegments(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radiusSegments: val}}));\n  }\n\n  get G_radiusSegments() {\n    return this.native.geometry.parameters.radiusSegments;\n  }\n\n  clone() {\n    return new Cylinder({build: false}).copy(this);\n  }\n}\n\nexport {\n  Cylinder\n};\n"]}