{"version":3,"sources":["meshes/ConvexModel.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,W;;;AACJ,yBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,6GACjB,MADiB,EACT,OADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,YAAM,EADgB;AAEtB,eAAS;AAFa,KAAxB;;AAKA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA,kGAAW,MAAX;AACD;AAXsB;AAYxB;;;;4BAEkB;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;AAAA,UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,UAAvB,GAAoC,MAAM,IADnD;;AAGA,UAAM,UAAU,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AACvC,wBAAW,IAAX,CAAgB,OAAO,QAAP,CAAgB,IAAhC,EAAsC,UAAC,IAAD,EAAO,SAAP,EAAqB;AACzD,cAAI,OAAO,QAAP,CAAgB,OAApB,EAA6B;AAC3B,4BAAW,IAAX,CAAgB,OAAO,QAAP,CAAgB,OAAhC,EAAyC,iBAAS;AAChD,kBAAI,iBAAJ;;AAEA,kBAAI,OAAO,QAAP,CAAgB,eAApB,EAAqC;AACnC,2BAAW,uBACT,iBAAO,OAAO,QAAd,EAAwB;AACtB,gCAAc,IADQ;AAEtB,gCAAc,MAAM;AAFE,iBAAxB,CADS,EAKT,SALF;AAMD,eAPD,MAOO,IAAI,CAAC,SAAD,IAAc,OAAO,QAAP,CAAgB,iBAAlC,EAAqD;AAC1D,2BAAW,uBACT,OAAO,QADE,EAET,SAFF;AAGD,eAJM,MAIA,WAAW,IAAI,MAAM,aAAV,CAAwB,SAAxB,CAAX;;AAEP,mBAAK,kBAAL;AACA,mBAAK,oBAAL;;AAEA,qBAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,IADe,EAEf,QAFe,EAGf,OAAO,IAHQ,EAIf,KAJe,EAKf,OAAO,KALQ,CAAjB;;AAQA;AACD,aA5BD;AA6BD,WA9BD,MA8BO;AACL,gBAAI,iBAAJ;;AAEA,gBAAI,OAAO,QAAP,CAAgB,eAApB,EAAqC;AACnC,yBAAW,uBACT,iBAAO,OAAO,QAAd,EAAwB;AACtB,8BAAc,IADQ;AAEtB,8BAAc,MAAM;AAFE,eAAxB,CADS,EAKT,SALF;AAMD,aAPD,MAOO,IAAI,CAAC,SAAD,IAAc,OAAO,QAAP,CAAgB,iBAAlC,EAAqD;AAC1D,yBAAW,uBACT,OAAO,QADE,EAET,SAFF;AAGD,aAJM,MAIA,WAAW,IAAI,MAAM,aAAV,CAAwB,SAAxB,CAAX;;AAEP,iBAAK,kBAAL;AACA,iBAAK,oBAAL;;AAEA,mBAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,IADe,EAEf,QAFe,EAGf,OAAO,IAHQ,CAAjB;;AAMA;AACD;AACF,SA1DD;AA2DD,OA5De,CAAhB;;AA8DA,gGAAW,OAAX;;AAEA,aAAO,OAAP;AACD;;;4BAEO;AACN,aAAO,IAAI,WAAJ,CAAgB,EAAC,OAAO,KAAR,EAAhB,EAAgC,IAAhC,CAAqC,IAArC,CAAP;AACD;;;;;QAID,W,GAAA,W","file":"ConvexModel.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend, loadMaterial, JSONLoader} from '../extras/api';\n\nclass ConvexModel extends Shape {\n  constructor(params = {}) {\n    super(params, 'model');\n\n    extend(params.geometry, {\n      path: '',\n      physics: ''\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap('wait');\n    }\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh;\n\n    const promise = new Promise((resolve) => {\n      JSONLoader.load(params.geometry.path, (data, materials) => {\n        if (params.geometry.physics) {\n          JSONLoader.load(params.geometry.physics, data2 => {\n            let material;\n\n            if (params.material.useVertexColors) {\n              material = loadMaterial(\n                extend(params.material, {\n                  morphTargets: true,\n                  vertexColors: THREE.FaceColors\n                })\n              )._material;\n            } else if (!materials || params.material.useCustomMaterial) {\n              material = loadMaterial(\n                params.material\n              )._material;\n            } else material = new THREE.MultiMaterial(materials);\n\n            data.computeFaceNormals();\n            data.computeVertexNormals();\n\n            _scope.setNative(new Mesh(\n              data,\n              material,\n              params.mass,\n              data2,\n              params.scale\n            ));\n\n            resolve();\n          });\n        } else {\n          let material;\n\n          if (params.material.useVertexColors) {\n            material = loadMaterial(\n              extend(params.material, {\n                morphTargets: true,\n                vertexColors: THREE.FaceColors\n              })\n            )._material;\n          } else if (!materials || params.material.useCustomMaterial) {\n            material = loadMaterial(\n              params.material\n            )._material;\n          } else material = new THREE.MultiMaterial(materials);\n\n          data.computeFaceNormals();\n          data.computeVertexNormals();\n\n          _scope.setNative(new Mesh(\n            data,\n            material,\n            params.mass\n          ));\n\n          resolve();\n        }\n      });\n    });\n\n    super.wait(promise);\n\n    return promise;\n  }\n\n  clone() {\n    return new ConvexModel({build: false}).copy(this);\n  }\n}\n\nexport {\n  ConvexModel\n};\n"]}