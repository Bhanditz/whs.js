{"version":3,"sources":["meshes/ConvexModel.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,W;;;AACJ,yBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,6GACjB,MADiB,EACT,OADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,YAAM,EADgB;AAEtB,eAAS;AAFa,KAAxB;;AAKA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA,kGAAW,MAAX;AACD;AAXsB;AAYxB;;;;4BAEkB;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;AAAA,UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,UAAvB,GAAoC,MAAM,IADnD;;AAGA,UAAM,UAAU,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AACvC,wBAAW,IAAX,CAAgB,OAAO,QAAP,CAAgB,IAAhC,EAAsC,UAAC,IAAD,EAAO,SAAP,EAAqB;AACzD,cAAI,OAAO,QAAP,CAAgB,OAApB,EAA6B;AAC3B,4BAAW,IAAX,CAAgB,OAAO,QAAP,CAAgB,OAAhC,EAAyC,iBAAS;AAChD,kBAAI,iBAAJ;;AAEA,kBAAI,OAAO,QAAP,CAAgB,eAApB,EAAqC;AACnC,2BAAW,uBACT,iBAAO,OAAO,QAAd,EAAwB;AACtB,gCAAc,IADQ;AAEtB,gCAAc,MAAM;AAFE,iBAAxB,CADS,EAKT,SALF;AAMD,eAPD,MAOO,IAAI,CAAC,SAAD,IAAc,OAAO,QAAP,CAAgB,iBAAlC,EAAqD;AAC1D,2BAAW,uBACT,OAAO,QADE,EAET,SAFF;AAGD,eAJM,MAIA,WAAW,IAAI,MAAM,aAAV,CAAwB,SAAxB,CAAX;;AAEP,mBAAK,kBAAL;AACA,mBAAK,oBAAL;;AAEA,qBAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,IADe,EAEf,QAFe,EAGf,OAAO,IAHQ,EAIf,KAJe,EAKf,OAAO,KALQ,CAAjB;;AAQA;AACD,aA5BD;AA6BD,WA9BD,MA8BO;AACL,gBAAI,iBAAJ;;AAEA,gBAAI,OAAO,QAAP,CAAgB,eAApB,EAAqC;AACnC,yBAAW,uBACT,iBAAO,OAAO,QAAd,EAAwB;AACtB,8BAAc,IADQ;AAEtB,8BAAc,MAAM;AAFE,eAAxB,CADS,EAKT,SALF;AAMD,aAPD,MAOO,IAAI,CAAC,SAAD,IAAc,OAAO,QAAP,CAAgB,iBAAlC,EAAqD;AAC1D,yBAAW,uBACT,OAAO,QADE,EAET,SAFF;AAGD,aAJM,MAIA,WAAW,IAAI,MAAM,aAAV,CAAwB,SAAxB,CAAX;;AAEP,iBAAK,kBAAL;AACA,iBAAK,oBAAL;;AAEA,mBAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,IADe,EAEf,QAFe,EAGf,OAAO,IAHQ,CAAjB;;AAMA;AACD;AACF,SA1DD;AA2DD,OA5De,CAAhB;;AA8DA,gGAAW,OAAX;;AAEA,aAAO,OAAP;AACD;;;4BAEO;AACN,aAAO,IAAI,WAAJ,CAAgB,EAAC,OAAO,KAAR,EAAhB,EAAgC,IAAhC,CAAqC,IAArC,CAAP;AACD;;;;;QAID,W,GAAA,W","file":"ConvexModel.js","sourcesContent":["import * as THREE from 'three';\r\nimport Physijs from '../physics/physi.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend, loadMaterial, JSONLoader} from '../extras/api';\r\n\r\nclass ConvexModel extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'model');\r\n\r\n    extend(params.geometry, {\r\n      path: '',\r\n      physics: ''\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap('wait');\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const _scope = this,\r\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh;\r\n\r\n    const promise = new Promise((resolve) => {\r\n      JSONLoader.load(params.geometry.path, (data, materials) => {\r\n        if (params.geometry.physics) {\r\n          JSONLoader.load(params.geometry.physics, data2 => {\r\n            let material;\r\n\r\n            if (params.material.useVertexColors) {\r\n              material = loadMaterial(\r\n                extend(params.material, {\r\n                  morphTargets: true,\r\n                  vertexColors: THREE.FaceColors\r\n                })\r\n              )._material;\r\n            } else if (!materials || params.material.useCustomMaterial) {\r\n              material = loadMaterial(\r\n                params.material\r\n              )._material;\r\n            } else material = new THREE.MultiMaterial(materials);\r\n\r\n            data.computeFaceNormals();\r\n            data.computeVertexNormals();\r\n\r\n            _scope.setNative(new Mesh(\r\n              data,\r\n              material,\r\n              params.mass,\r\n              data2,\r\n              params.scale\r\n            ));\r\n\r\n            resolve();\r\n          });\r\n        } else {\r\n          let material;\r\n\r\n          if (params.material.useVertexColors) {\r\n            material = loadMaterial(\r\n              extend(params.material, {\r\n                morphTargets: true,\r\n                vertexColors: THREE.FaceColors\r\n              })\r\n            )._material;\r\n          } else if (!materials || params.material.useCustomMaterial) {\r\n            material = loadMaterial(\r\n              params.material\r\n            )._material;\r\n          } else material = new THREE.MultiMaterial(materials);\r\n\r\n          data.computeFaceNormals();\r\n          data.computeVertexNormals();\r\n\r\n          _scope.setNative(new Mesh(\r\n            data,\r\n            material,\r\n            params.mass\r\n          ));\r\n\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n\r\n    super.wait(promise);\r\n\r\n    return promise;\r\n  }\r\n\r\n  clone() {\r\n    return new ConvexModel({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  ConvexModel\r\n};\r\n"]}