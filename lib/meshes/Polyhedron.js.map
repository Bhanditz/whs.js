{"version":3,"sources":["meshes/Polyhedron.js"],"names":[],"mappings":"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","file":"Polyhedron.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Polyhedron extends Shape {\n  constructor(params = {}) {\n    super(params, 'polyhedron');\n\n    extend(params.geometry, {\n      verticesOfCube: this.verticesOfCube,\n      indicesOfFaces: this.indicesOfFaces,\n      radius: 6,\n      detail: 2\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        this.buildGeometry(params),\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  get verticesOfCube() {\n    return [\n      -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1,\n      -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1\n    ];\n  }\n\n  get indicesOfFaces() {\n    return [\n      2, 1, 0, 0, 3, 2,\n      0, 4, 7, 7, 3, 0,\n      0, 1, 5, 5, 4, 0,\n      1, 2, 6, 6, 5, 1,\n      2, 3, 7, 7, 6, 2,\n      4, 5, 6, 6, 7, 4\n    ];\n  }\n\n  buildGeometry(params = {}) {\n    return new THREE.PolyhedronGeometry(\n      params.geometry.verticesOfCube,\n      params.geometry.indicesOfFaces,\n      params.geometry.radius,\n      params.geometry.detail\n    );\n  }\n\n  set G_verticesOfCube(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {verticesOfCube: val}}));\n  }\n\n  get G_verticesOfCube() {\n    return this.native.geometry.parameters.verticesOfCube;\n  }\n\n  set G_indicesOfFaces(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {indicesOfFaces: val}}));\n  }\n\n  get G_indicesOfFaces() {\n    return this.native.geometry.parameters.indicesOfFaces;\n  }\n\n  set G_radius(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\n  }\n\n  get G_radius() {\n    return this.native.geometry.parameters.radius;\n  }\n\n  set G_detail(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {detail: val}}));\n  }\n\n  get G_detail() {\n    return this.native.geometry.parameters.detail;\n  }\n\n  clone() {\n    return new Polyhedron({build: false}).copy(this);\n  }\n}\n\nexport {\n  Polyhedron\n};\n"]}