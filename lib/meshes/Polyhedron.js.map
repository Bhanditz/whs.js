{"version":3,"sources":["meshes/Polyhedron.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;IAEM,U;;;AACJ,wBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,oHACjB,MADiB,EACT,YADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;;AAEtB,sBAAgB,MAAK,cAFC;AAGtB,sBAAgB,MAAK,cAHC;AAItB,cAAQ,CAJc;AAKtB,cAAQ;;AALc,KAAxB;;AASA,UAAK,KAAL,CAAW,MAAX;;AAEA;AAduB;AAexB;;;;4BAEkB;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;UACE,OAAO,KAAK,OAAL,GAAe,8BAAQ,UAAvB,GAAoC,gBAAM,IADnD;UAEE,qHAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,sBAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,IAAI,gBAAM,kBAAV,CAEE,OAAO,QAAP,CAAgB,cAFlB,EAGE,OAAO,QAAP,CAAgB,cAHlB,EAIE,OAAO,QAAP,CAAgB,MAJlB,EAKE,OAAO,QAAP,CAAgB,MALlB,CADe,EAUf,QAVe,EAWf,OAAO,IAXQ,CAAjB;;AAcA;AACD,OAhBM,CAAP;AAiBD;;;4BAoBO;AACN,aAAO,IAAI,UAAJ,CAAe,KAAK,SAAL,EAAf,EAAiC,KAAK,KAAtC,EAA6C,IAA7C,CAAkD,IAAlD,CAAP;AACD;;;wBApBoB;AACnB,aAAO,CACL,CAAC,CADI,EACD,CAAC,CADA,EACG,CAAC,CADJ,EACO,CADP,EACU,CAAC,CADX,EACc,CAAC,CADf,EACkB,CADlB,EACqB,CADrB,EACwB,CAAC,CADzB,EAC4B,CAAC,CAD7B,EACgC,CADhC,EACmC,CAAC,CADpC,EAEL,CAAC,CAFI,EAED,CAAC,CAFA,EAEG,CAFH,EAEM,CAFN,EAES,CAAC,CAFV,EAEa,CAFb,EAEgB,CAFhB,EAEmB,CAFnB,EAEsB,CAFtB,EAEyB,CAAC,CAF1B,EAE6B,CAF7B,EAEgC,CAFhC,CAAP;AAID;;;wBAEoB;AACnB,aAAO,CACL,CADK,EACF,CADE,EACC,CADD,EACI,CADJ,EACO,CADP,EACU,CADV,EAEL,CAFK,EAEF,CAFE,EAEC,CAFD,EAEI,CAFJ,EAEO,CAFP,EAEU,CAFV,EAGL,CAHK,EAGF,CAHE,EAGC,CAHD,EAGI,CAHJ,EAGO,CAHP,EAGU,CAHV,EAIL,CAJK,EAIF,CAJE,EAIC,CAJD,EAII,CAJJ,EAIO,CAJP,EAIU,CAJV,EAKL,CALK,EAKF,CALE,EAKC,CALD,EAKI,CALJ,EAKO,CALP,EAKU,CALV,EAML,CANK,EAMF,CANE,EAMC,CAND,EAMI,CANJ,EAMO,CANP,EAMU,CANV,CAAP;AAQD;;;;;QAQa,O,GAAd,U","file":"Polyhedron.js","sourcesContent":["import THREE from 'three';\nimport Physijs from 'whitestormjs-physijs';\n\nimport Shape from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Polyhedron extends Shape {\n  constructor(params = {}) {\n    super(params, 'polyhedron');\n\n    extend(params.geometry, {\n\n      verticesOfCube: this.verticesOfCube,\n      indicesOfFaces: this.indicesOfFaces,\n      radius: 6,\n      detail: 2\n\n    });\n\n    this.build(params);\n\n    super.wrap();\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        new THREE.PolyhedronGeometry(\n\n          params.geometry.verticesOfCube,\n          params.geometry.indicesOfFaces,\n          params.geometry.radius,\n          params.geometry.detail\n\n        ),\n\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  get verticesOfCube() {\n    return [\n      -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1,\n      -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1\n    ];\n  }\n\n  get indicesOfFaces() {\n    return [\n      2, 1, 0, 0, 3, 2,\n      0, 4, 7, 7, 3, 0,\n      0, 1, 5, 5, 4, 0,\n      1, 2, 6, 6, 5, 1,\n      2, 3, 7, 7, 6, 2,\n      4, 5, 6, 6, 7, 4\n    ];\n  }\n\n  clone() {\n    return new Polyhedron(this.getParams(), this._type).copy(this);\n  }\n}\n\nexport {\n  Polyhedron as default\n};\n"]}