{"version":3,"sources":["meshes/Text.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,I;;;AACJ,kBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,8GACjB,MADiB,EACT,MADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,YAAM,cADgB;;AAGtB,kBAAY;AACV,cAAM,EADI;AAEV,gBAAQ,EAFE;AAGV,uBAAe,EAHL;AAIV,cAAM,IAAI,MAAM,IAAV,EAJI;AAKV,sBAAc,KALJ;AAMV,wBAAgB,EANN;AAOV,mBAAW;AAPD;AAHU,KAAxB;;AAcA,UAAK,KAAL,CAAW,MAAX;AACA,iGAAW,MAAX;AAlBuB;AAmBxB;;;;4BAEkB;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,WAAvB,GAAqC,MAAM,IADpD;UAEE,+GAA+B,OAAO,QAAtC,CAFF;;AAIA,UAAM,UAAU,sBAAY,UAAC,OAAD,EAAa;AACvC,iBAAS,OAAO,QAAP,CAAgB,UAAhB,CAA2B,IAApC,EAA0C,gBAAQ;AAChD,iBAAO,QAAP,CAAgB,UAAhB,CAA2B,IAA3B,GAAkC,IAAlC;;AAEA,iBAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,IAAI,MAAM,YAAV,CACE,OAAO,QAAP,CAAgB,IADlB,EAEE,OAAO,QAAP,CAAgB,UAFlB,CADe,EAMf,QANe,EAOf,OAAO,IAPQ,CAAjB;;AAUA;AACD,SAdD;AAeD,OAhBe,CAAhB;;AAkBA,iGAAW,OAAX;;AAEA,aAAO,OAAP;AACD;;;4BAEO;AACN,aAAO,IAAI,IAAJ,CAAS,KAAK,SAAL,EAAT,EAA2B,KAAK,KAAhC,EAAuC,IAAvC,CAA4C,IAA5C,CAAP;AACD;;;;;QAID,I,GAAA,I","file":"Text.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs  from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend, loadMaterial} from '../extras/api';\n\nclass Text extends Shape {\n  constructor(params = {}) {\n    super(params, 'text');\n\n    extend(params.geometry, {\n      text: 'Hello World!',\n\n      parameters: {\n        size: 12,\n        height: 50,\n        curveSegments: 12,\n        font: new THREE.Font(),\n        bevelEnabled: false,\n        bevelThickness: 10,\n        bevelSize: 8\n      }\n    });\n\n    this.build(params);\n    super.wrap('wait');\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConcaveMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    const promise = new Promise((resolve) => {\n      loadFont(params.geometry.parameters.font, font => {\n        params.geometry.parameters.font = font;\n\n        _scope.setNative(new Mesh(\n          new THREE.TextGeometry(\n            params.geometry.text,\n            params.geometry.parameters\n          ),\n\n          material,\n          params.mass\n        ));\n\n        resolve();\n      });\n    });\n\n    super.wait(promise);\n\n    return promise;\n  }\n\n  clone() {\n    return new Text(this.getParams(), this._type).copy(this);\n  }\n}\n\nexport {\n  Text\n};\n"]}