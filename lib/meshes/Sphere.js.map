{"version":3,"sources":["meshes/Sphere.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,M;;;AACJ,oBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,gHACjB,MADiB,EACT,QADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,CADc;AAEtB,qBAAe,CAFO;AAGtB,sBAAgB;AAHM,KAAxB;;AAMA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAZsB;AAaxB;;;;4BAEkB;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,UAAvB,GAAoC,MAAM,IADnD;UAEE,iHAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,sBAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,OAAO,aAAP,CAAqB,MAArB,CADe,EAGf,QAHe,EAIf,OAAO,IAJQ,CAAjB;;AAOA;AACD,OATM,CAAP;AAUD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,aAAO,IAAI,MAAM,cAAV,CACL,OAAO,QAAP,CAAgB,MADX,EAEL,OAAO,QAAP,CAAgB,aAFX,EAGL,OAAO,QAAP,CAAgB,cAHX,CAAP;AAKD;;;4BA0BO;AACN,aAAO,IAAI,MAAJ,CAAW,EAAC,OAAO,KAAR,EAAX,EAA2B,IAA3B,CAAgC,IAAhC,CAAP;AACD;;;sBA1BY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEmB,G,EAAK;AACvB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,eAAe,GAAhB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEqB;AACpB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,aAAvC;AACD;;;sBAEoB,G,EAAK;AACxB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,eAAe,GAAhB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEsB;AACrB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,aAAvC;AACD;;;;;QAQD,M,GAAA,M","file":"Sphere.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Sphere extends Shape {\n  constructor(params = {}) {\n    super(params, 'sphere');\n\n    extend(params.geometry, {\n      radius: 1,\n      widthSegments: 8,\n      heightSegments: 6\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.SphereMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        _scope.buildGeometry(params),\n\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  buildGeometry(params = {}) {\n    return new THREE.SphereGeometry(\n      params.geometry.radius,\n      params.geometry.widthSegments,\n      params.geometry.heightSegments\n    );\n  }\n\n  set G_radius(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\n  }\n\n  get G_radius() {\n    return this.native.geometry.parameters.radius;\n  }\n\n  set G_widthSegments(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {widthSegments: val}}));\n  }\n\n  get G_widthSegments() {\n    return this.native.geometry.parameters.widthSegments;\n  }\n\n  set G_heightSegments(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {widthSegments: val}}));\n  }\n\n  get G_heightSegments() {\n    return this.native.geometry.parameters.widthSegments;\n  }\n\n  clone() {\n    return new Sphere({build: false}).copy(this);\n  }\n}\n\nexport {\n  Sphere\n};\n"]}