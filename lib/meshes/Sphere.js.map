{"version":3,"sources":["meshes/Sphere.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;IAAY,O;;AAEZ;;AACA;;;;;;IAEM,M;;;AACJ,oBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,wGACjB,MADiB,EACT,QADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,CADc;AAEtB,qBAAe,CAFO;AAGtB,sBAAgB;AAHM,KAAxB;;AAMA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAZsB;AAaxB;;;;4BAEkB;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;AAAA,UACE,OAAO,KAAK,OAAL,GAAe,QAAQ,UAAvB,GAAoC,MAAM,IADnD;AAAA,UAEE,yGAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,OAAO,aAAP,CAAqB,MAArB,CADe,EAGf,QAHe,EAIf,OAAO,IAJQ,CAAjB;;AAOA;AACD,OATM,CAAP;AAUD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,aAAO,IAAI,MAAM,cAAV,CACL,OAAO,QAAP,CAAgB,MADX,EAEL,OAAO,QAAP,CAAgB,aAFX,EAGL,OAAO,QAAP,CAAgB,cAHX,CAAP;AAKD;;;4BA0BO;AACN,aAAO,IAAI,MAAJ,CAAW,EAAC,OAAO,KAAR,EAAX,EAA2B,IAA3B,CAAgC,IAAhC,CAAP;AACD;;;sBA1BY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEmB,G,EAAK;AACvB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,eAAe,GAAhB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEqB;AACpB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,aAAvC;AACD;;;sBAEoB,G,EAAK;AACxB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,eAAe,GAAhB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEsB;AACrB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,aAAvC;AACD;;;;;QAQD,M,GAAA,M","file":"Sphere.js","sourcesContent":["import * as THREE from 'three';\r\nimport * as Physijs from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend} from '../extras/api';\r\n\r\nclass Sphere extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'sphere');\r\n\r\n    extend(params.geometry, {\r\n      radius: 1,\r\n      widthSegments: 8,\r\n      heightSegments: 6\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const _scope = this,\r\n      Mesh = this.physics ? Physijs.SphereMesh : THREE.Mesh,\r\n      material = super._initMaterial(params.material);\r\n\r\n    return new Promise((resolve) => {\r\n      _scope.setNative(new Mesh(\r\n        _scope.buildGeometry(params),\r\n\r\n        material,\r\n        params.mass\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    return new THREE.SphereGeometry(\r\n      params.geometry.radius,\r\n      params.geometry.widthSegments,\r\n      params.geometry.heightSegments\r\n    );\r\n  }\r\n\r\n  set G_radius(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\r\n  }\r\n\r\n  get G_radius() {\r\n    return this.native.geometry.parameters.radius;\r\n  }\r\n\r\n  set G_widthSegments(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {widthSegments: val}}));\r\n  }\r\n\r\n  get G_widthSegments() {\r\n    return this.native.geometry.parameters.widthSegments;\r\n  }\r\n\r\n  set G_heightSegments(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {widthSegments: val}}));\r\n  }\r\n\r\n  get G_heightSegments() {\r\n    return this.native.geometry.parameters.widthSegments;\r\n  }\r\n\r\n  clone() {\r\n    return new Sphere({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Sphere\r\n};\r\n"]}