{"version":3,"sources":["meshes/Sphere.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;IAAY,O;;AAEZ;;AACA;;;;;;IAEM,M;;;AACJ,oBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,wGACjB,MADiB,EACT,QADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,CADc;AAEtB,qBAAe,CAFO;AAGtB,sBAAgB;AAHM,KAAxB;;AAMA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAZsB;AAaxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,yGAA+B,OAAO,QAAtC,CAAN;;AAEA,UAAI,aAAJ;;AAEA,UAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,GAAiB,QAArC,EAA+C,OAAO,QAAQ,QAAf,CAA/C,KACK,IAAI,KAAK,OAAT,EAAkB,OAAO,QAAQ,UAAf,CAAlB,KACA,OAAO,MAAM,IAAb;;AAEL,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAK,SAAL,CAAe,IAAI,IAAJ,CACb,OAAK,aAAL,CAAmB,MAAnB,CADa,EAGb,QAHa,EAIb,OAAK,SAAL,EAJa,CAAf;;AAOA;AACD,OATM,CAAP;AAUD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,UAAM,aAAa,OAAO,MAAP,IAAiB,CAAC,OAAO,QAAzB,GAAoC,MAAM,oBAA1C,GAAiE,MAAM,cAA1F;;AAEA,UAAM,WAAW,IAAI,UAAJ,CACf,OAAO,QAAP,CAAgB,MADD,EAEf,OAAO,QAAP,CAAgB,aAFD,EAGf,OAAO,QAAP,CAAgB,cAHD,CAAjB;;AAMA,UAAI,OAAO,QAAX,EAAqB,KAAK,wBAAL,CAA8B,QAA9B;;AAErB,aAAO,QAAP;AACD;;;4BA0BO;AACN,aAAO,KAAK,SAAL,GAAiB,QAAjB,GAA4B,IAAI,MAAJ,CAAW,KAAK,SAAL,EAAX,CAA5B,GAA2D,IAAI,MAAJ,CAAW,EAAC,OAAO,KAAR,EAAX,EAA2B,IAA3B,CAAgC,IAAhC,CAAlE;AACD;;;sBA1BY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEmB,G,EAAK;AACvB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,eAAe,GAAhB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEqB;AACpB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,aAAvC;AACD;;;sBAEoB,G,EAAK;AACxB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,eAAe,GAAhB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEsB;AACrB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,aAAvC;AACD;;;;;QAQD,M,GAAA,M","file":"Sphere.js","sourcesContent":["import * as THREE from 'three';\nimport * as Physijs from '../physics/index.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Sphere extends Shape {\n  constructor(params = {}) {\n    super(params, 'sphere');\n\n    extend(params.geometry, {\n      radius: 1,\n      widthSegments: 8,\n      heightSegments: 6\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const material = super._initMaterial(params.material);\n\n    let Mesh;\n\n    if (this.physics && this.getParams().softbody) Mesh = Physijs.SoftMesh;\n    else if (this.physics) Mesh = Physijs.SphereMesh;\n    else Mesh = THREE.Mesh;\n\n    return new Promise((resolve) => {\n      this.setNative(new Mesh(\n        this.buildGeometry(params),\n\n        material,\n        this.getParams()\n      ));\n\n      resolve();\n    });\n  }\n\n  buildGeometry(params = {}) {\n    const GConstruct = params.buffer && !params.softbody ? THREE.SphereBufferGeometry : THREE.SphereGeometry;\n\n    const geometry = new GConstruct(\n      params.geometry.radius,\n      params.geometry.widthSegments,\n      params.geometry.heightSegments\n    );\n\n    if (params.softbody) this.proccessSoftbodyGeometry(geometry);\n\n    return geometry;\n  }\n\n  set G_radius(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\n  }\n\n  get G_radius() {\n    return this.native.geometry.parameters.radius;\n  }\n\n  set G_widthSegments(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {widthSegments: val}}));\n  }\n\n  get G_widthSegments() {\n    return this.native.geometry.parameters.widthSegments;\n  }\n\n  set G_heightSegments(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {widthSegments: val}}));\n  }\n\n  get G_heightSegments() {\n    return this.native.geometry.parameters.widthSegments;\n  }\n\n  clone() {\n    return this.getParams().softbody ? new Sphere(this.getParams()) : new Sphere({build: false}).copy(this);\n  }\n}\n\nexport {\n  Sphere\n};\n"]}