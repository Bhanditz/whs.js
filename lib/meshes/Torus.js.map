{"version":3,"sources":["meshes/Torus.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;IAAY,O;;AAEZ;;AACA;;;;;;IAEM,K;;;AACJ,mBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,uGACjB,MADiB,EACT,OADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,GADc;AAEtB,YAAM,EAFgB;AAGtB,sBAAgB,CAHM;AAItB,uBAAiB,CAJK;AAKtB,WAAK,KAAK,EAAL,GAAU;AALO,KAAxB;;AAQA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAdsB;AAexB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;AAAA,UACE,OAAO,KAAK,OAAL,GAAe,QAAQ,UAAvB,GAAoC,MAAM,IADnD;AAAA,UAEE,wGAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,OAAK,aAAL,CAAmB,MAAnB,CADe,EAEf,QAFe,EAGf,OAAO,IAHQ,CAAjB;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,aAAO,IAAI,MAAM,aAAV,CACL,OAAO,QAAP,CAAgB,MADX,EAEL,OAAO,QAAP,CAAgB,IAFX,EAGL,OAAO,QAAP,CAAgB,cAHX,EAIL,OAAO,QAAP,CAAgB,eAJX,EAKL,OAAO,QAAP,CAAgB,GALX,CAAP;AAOD;;;4BA0CO;AACN,aAAO,IAAI,KAAJ,CAAU,EAAC,OAAO,KAAR,EAAV,EAA0B,IAA1B,CAA+B,IAA/B,CAAP;AACD;;;sBA1CY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEU,G,EAAK;AACd,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,MAAM,GAAP,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEY;AACX,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,IAAvC;AACD;;;sBAEoB,G,EAAK;AACxB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,gBAAgB,GAAjB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEsB;AACrB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,cAAvC;AACD;;;sBAEqB,G,EAAK;AACzB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,iBAAiB,GAAlB,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEuB;AACtB,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,eAAvC;AACD;;;sBAES,G,EAAK;AACb,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,KAAK,GAAN,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEW;AACV,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,GAAvC;AACD;;;;;QAQD,K,GAAA,K","file":"Torus.js","sourcesContent":["import * as THREE from 'three';\nimport * as Physijs  from '../physics/index.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Torus extends Shape {\n  constructor(params = {}) {\n    super(params, 'torus');\n\n    extend(params.geometry, {\n      radius: 100,\n      tube: 40,\n      radialSegments: 8,\n      tubularSegments: 6,\n      arc: Math.PI * 2\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        this.buildGeometry(params),\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  buildGeometry(params = {}) {\n    return new THREE.TorusGeometry(\n      params.geometry.radius,\n      params.geometry.tube,\n      params.geometry.radialSegments,\n      params.geometry.tubularSegments,\n      params.geometry.arc\n    );\n  }\n\n  set G_radius(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\n  }\n\n  get G_radius() {\n    return this.native.geometry.parameters.radius;\n  }\n\n  set G_tube(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {tube: val}}));\n  }\n\n  get G_tube() {\n    return this.native.geometry.parameters.tube;\n  }\n\n  set G_radialSegments(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radialSegments: val}}));\n  }\n\n  get G_radialSegments() {\n    return this.native.geometry.parameters.radialSegments;\n  }\n\n  set G_tubularSegments(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {tubularSegments: val}}));\n  }\n\n  get G_tubularSegments() {\n    return this.native.geometry.parameters.tubularSegments;\n  }\n\n  set G_arc(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {arc: val}}));\n  }\n\n  get G_arc() {\n    return this.native.geometry.parameters.arc;\n  }\n\n  clone() {\n    return new Torus({build: false}).copy(this);\n  }\n}\n\nexport {\n  Torus\n};\n"]}