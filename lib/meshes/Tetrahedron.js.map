{"version":3,"sources":["meshes/Tetrahedron.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,W;;;AACJ,yBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,6GACjB,MADiB,EACT,aADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,CADc;AAEtB,cAAQ;AAFc,KAAxB;;AAKA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAXsB;AAYxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,UAAvB,GAAoC,MAAM,IADnD;UAEE,8GAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,OAAK,aAAL,CAAmB,MAAnB,CADe,EAEf,QAFe,EAGf,OAAO,IAHQ,CAAjB;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,aAAO,IAAI,MAAM,mBAAV,CACL,OAAO,QAAP,CAAgB,MADX,EAEL,OAAO,QAAP,CAAgB,MAFX,CAAP;AAID;;;4BAkBO;AACN,aAAO,IAAI,WAAJ,CAAgB,EAAC,OAAO,KAAR,EAAhB,EAAgC,IAAhC,CAAqC,IAArC,CAAP;AACD;;;sBAlBY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;;;QAQD,W,GAAA,W","file":"Tetrahedron.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Tetrahedron extends Shape {\n  constructor(params = {}) {\n    super(params, 'tetrahedron');\n\n    extend(params.geometry, {\n      radius: 1,\n      detail: 0\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        this.buildGeometry(params),\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  buildGeometry(params = {}) {\n    return new THREE.TetrahedronGeometry(\n      params.geometry.radius,\n      params.geometry.detail\n    );\n  }\n\n  set G_radius(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\n  }\n\n  get G_radius() {\n    return this.native.geometry.parameters.radius;\n  }\n\n  set G_detail(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {detail: val}}));\n  }\n\n  get G_detail() {\n    return this.native.geometry.parameters.detail;\n  }\n\n  clone() {\n    return new Tetrahedron({build: false}).copy(this);\n  }\n}\n\nexport {\n  Tetrahedron\n};\n"]}