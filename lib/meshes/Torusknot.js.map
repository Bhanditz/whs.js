{"version":3,"sources":["meshes/Torusknot.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,S;;;AACJ,uBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,mHACjB,MADiB,EACT,WADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;;AAEtB,cAAQ,GAFc;AAGtB,YAAM,EAHgB;AAItB,sBAAgB,EAJM;AAKtB,uBAAiB,CALK;AAMtB,SAAG,CANmB;AAOtB,SAAG,CAPmB;AAQtB,mBAAa;;AARS,KAAxB;;AAYA,UAAK,KAAL,CAAW,MAAX;;AAEA;AAjBuB;AAkBxB;;;;4BAEkB;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,SAAS,IAAf;UACE,OAAO,KAAK,OAAL,GAAe,gBAAQ,UAAvB,GAAoC,MAAM,IADnD;UAEE,oHAA+B,OAAO,QAAtC,CAFF;;AAIA,aAAO,sBAAY,UAAC,OAAD,EAAa;AAC9B,eAAO,SAAP,CAAiB,IAAI,IAAJ,CACf,IAAI,MAAM,iBAAV,CAEE,OAAO,QAAP,CAAgB,MAFlB,EAGE,OAAO,QAAP,CAAgB,IAHlB,EAIE,OAAO,QAAP,CAAgB,cAJlB,EAKE,OAAO,QAAP,CAAgB,eALlB,EAME,OAAO,QAAP,CAAgB,CANlB,EAOE,OAAO,QAAP,CAAgB,CAPlB,EAQE,OAAO,QAAP,CAAgB,WARlB,CADe,EAaf,QAbe,EAcf,OAAO,IAdQ,CAAjB;;AAiBA;AACD,OAnBM,CAAP;AAoBD;;;4BAEO;AACN,aAAO,IAAI,SAAJ,CAAc,KAAK,SAAL,EAAd,EAAgC,KAAK,KAArC,EAA4C,IAA5C,CAAiD,IAAjD,CAAP;AACD;;;;;QAID,S,GAAA,S","file":"Torusknot.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs  from '../physics/physi.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Torusknot extends Shape {\n  constructor(params = {}) {\n    super(params, 'Torusknot');\n\n    extend(params.geometry, {\n\n      radius: 100,\n      tube: 40,\n      radialSegments: 64,\n      tubularSegments: 8,\n      p: 2,\n      q: 3,\n      heightScale: 1\n\n    });\n\n    this.build(params);\n\n    super.wrap();\n  }\n\n  build(params = {}) {\n    const _scope = this,\n      Mesh = this.physics ? Physijs.ConvexMesh : THREE.Mesh,\n      material = super._initMaterial(params.material);\n\n    return new Promise((resolve) => {\n      _scope.setNative(new Mesh(\n        new THREE.TorusKnotGeometry(\n\n          params.geometry.radius,\n          params.geometry.tube,\n          params.geometry.radialSegments,\n          params.geometry.tubularSegments,\n          params.geometry.p,\n          params.geometry.q,\n          params.geometry.heightScale\n\n        ),\n\n        material,\n        params.mass\n      ));\n\n      resolve();\n    });\n  }\n\n  clone() {\n    return new Torusknot(this.getParams(), this._type).copy(this);\n  }\n}\n\nexport {\n  Torusknot\n};\n"]}