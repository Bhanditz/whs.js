{"version":3,"sources":["meshes/Box.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;IAAY,O;;AAEZ;;AACA;;;;;;IAEM,G;;;AACJ,iBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,qGACjB,MADiB,EACT,KADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,aAAO,CADe;AAEtB,cAAQ,CAFc;AAGtB,aAAO;AAHe,KAAxB;;AAMA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAZsB;AAaxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,sGAA+B,OAAO,QAAtC,CAAN;;AAEA,UAAI,aAAJ;;AAEA,UAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,GAAiB,QAArC,EAA+C,OAAO,QAAQ,QAAf,CAA/C,KACK,IAAI,KAAK,OAAT,EAAkB,OAAO,QAAQ,OAAf,CAAlB,KACA,OAAO,MAAM,IAAb;;AAEL,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAK,SAAL,CAAe,IAAI,IAAJ,CACb,OAAK,aAAL,CAAmB,MAAnB,CADa,EAEb,QAFa,EAGb,OAAK,SAAL,EAHa,CAAf;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,UAAM,aAAa,OAAO,MAAP,IAAiB,CAAC,OAAO,QAAzB,GAAoC,MAAM,iBAA1C,GAA8D,MAAM,WAAvF;;AAEA,UAAM,WAAW,IAAI,UAAJ,CACf,OAAO,QAAP,CAAgB,KADD,EAEf,OAAO,QAAP,CAAgB,MAFD,EAGf,OAAO,QAAP,CAAgB,KAHD,CAAjB;;AAMA,UAAI,OAAO,QAAX,EAAqB,KAAK,wBAAL,CAA8B,QAA9B;;AAErB,aAAO,QAAP;AACD;;;4BA0BO;AACN,aAAO,KAAK,SAAL,GAAiB,QAAjB,GAA4B,IAAI,GAAJ,CAAQ,KAAK,SAAL,EAAR,CAA5B,GAAwD,IAAI,GAAJ,CAAQ,EAAC,OAAO,KAAR,EAAR,EAAwB,IAAxB,CAA6B,IAA7B,CAA/D;AACD;;;sBA1BW,G,EAAK;AACf,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,OAAO,GAAR,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEa;AACZ,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,KAAvC;AACD;;;sBAEY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEW,G,EAAK;AACf,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,OAAO,GAAR,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEa;AACZ,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,KAAvC;AACD;;;;;QAQD,G,GAAA,G","file":"Box.js","sourcesContent":["import * as THREE from 'three';\nimport * as Physijs from '../physics/index.js';\n\nimport {Shape} from '../core/Shape';\nimport {extend} from '../extras/api';\n\nclass Box extends Shape {\n  constructor(params = {}) {\n    super(params, 'box');\n\n    extend(params.geometry, {\n      width: 1,\n      height: 1,\n      depth: 1\n    });\n\n    if (params.build) {\n      this.build(params);\n      super.wrap();\n    }\n  }\n\n  build(params = {}) {\n    const material = super._initMaterial(params.material);\n\n    let Mesh;\n\n    if (this.physics && this.getParams().softbody) Mesh = Physijs.SoftMesh;\n    else if (this.physics) Mesh = Physijs.BoxMesh;\n    else Mesh = THREE.Mesh;\n\n    return new Promise((resolve) => {\n      this.setNative(new Mesh(\n        this.buildGeometry(params),\n        material,\n        this.getParams()\n      ));\n\n      resolve();\n    });\n  }\n\n  buildGeometry(params = {}) {\n    const GConstruct = params.buffer && !params.softbody ? THREE.BoxBufferGeometry : THREE.BoxGeometry;\n\n    const geometry = new GConstruct(\n      params.geometry.width,\n      params.geometry.height,\n      params.geometry.depth\n    );\n\n    if (params.softbody) this.proccessSoftbodyGeometry(geometry);\n\n    return geometry;\n  }\n\n  set G_width(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {width: val}}));\n  }\n\n  get G_width() {\n    return this.native.geometry.parameters.width;\n  }\n\n  set G_height(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {height: val}}));\n  }\n\n  get G_height() {\n    return this.native.geometry.parameters.height;\n  }\n\n  set G_depth(val) {\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {depth: val}}));\n  }\n\n  get G_depth() {\n    return this.native.geometry.parameters.depth;\n  }\n\n  clone() {\n    return this.getParams().softbody ? new Box(this.getParams()) : new Box({build: false}).copy(this);\n  }\n}\n\nexport {\n  Box\n};\n"]}