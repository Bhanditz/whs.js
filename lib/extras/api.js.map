{"version":3,"sources":["extras/api.js"],"names":[],"mappings":"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","file":"api.js","sourcesContent":["import * as THREE from 'three';\nimport Physijs from '../physics/physi.js';\n\nimport {JSONLoader, TextureLoader, FontLoader} from '../utils/loaders';\n\nconst extend = (object, ...extensions) => { // $.extend alternative, ... is the spread operator.\n  for (const extension of extensions) {\n    // console.log(extension);\n    // console.log(typeof extension);\n\n    if (!extension)\n      continue; // Ignore null and undefined objects and paramaters.\n\n    for (const prop of Object.getOwnPropertyNames(extension)) { // Do not traverse the prototype chain.\n      if (object[prop] !== undefined\n        && object[prop].toString() === '[object Object]'\n        && extension[prop].toString() === '[object Object]')\n\n        // Goes deep only if object[prop] and extension[prop] are both objects !\n        extend(object[prop], extension[prop]);\n\n      else\n        object[prop] = (object[prop] === 0) ? 0 : object[prop];\n      if (typeof object[prop] === 'undefined') object[prop] = extension[prop]; // Add values that do not already exist.\n    }\n  }\n\n  return object;\n};\n\nconst texture = (url, repeat = {}) => {\n  const texture = TextureLoader.load(url);\n\n  if (repeat) {\n    const opt = extend(repeat, {\n      offset: {\n        x: 0,\n        y: 0\n      },\n      repeat: {\n        x: 1,\n        y: 1\n      }\n    });\n\n    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n    texture.offset.set(opt.offset.x, opt.offset.y);\n    texture.repeat.set(opt.repeat.x, opt.repeat.y);\n\n    texture.magFilter = THREE.NearestFilter;\n    texture.minFilter = THREE.LinearMipMapLinearFilter;\n  }\n\n  return texture;\n};\n\nconst loadMaterial = (material = {}) => {\n  if (typeof material.kind !== 'string')\n    console.error('Type of material is undefined or not a string. @loadMaterial');\n\n  const scope = {\n    _type: material.kind,\n    _restitution: !isNaN(parseFloat(material.restitution)) ?\n      material.restitution : !isNaN(parseFloat(material.rest)) ?\n      material.rest : 0.3,\n    _friction: !isNaN(parseFloat(material.friction)) ?\n      material.friction : !isNaN(parseFloat(material.fri)) ?\n      material.fri : 0.8\n  };\n\n  console.log(material);\n\n  if (material.texture) material.map = texture(material.texture);\n\n  const params = Object.assign({}, material);\n\n  delete params.kind;\n\n  delete params.friction;\n  delete params.fri;\n\n  delete params.restitution;\n  delete params.rest;\n\n  delete params.useCustomMaterial;\n  delete params.useVertexColors;\n\n  switch (material.kind) {\n    case 'basic':\n      scope._material = new THREE.MeshBasicMaterial(params);\n      break;\n\n    case 'linebasic':\n      scope._material = new THREE.LineBasicMaterial(params);\n      break;\n\n    case 'linedashed':\n      scope._material = new THREE.LineDashedMaterial(params);\n      break;\n\n    case 'material':\n      scope._material = new THREE.Material(params);\n      break;\n\n    case 'depth':\n      scope._material = new THREE.MeshDepthMaterial(params);\n      break;\n\n    case 'face':\n      scope._material = new THREE.MeshFaceMaterial(params);\n      break;\n\n    case 'lambert':\n      scope._material = new THREE.MeshLambertMaterial(params);\n      break;\n\n    case 'normal':\n      scope._material = new THREE.MeshNormalMaterial(params);\n      break;\n\n    case 'phong':\n      scope._material = new THREE.MeshPhongMaterial(params);\n      break;\n\n    case 'pointcloud':\n      scope._material = new THREE.PointCloudMaterial(params);\n      break;\n\n    case 'rawshader':\n      scope._material = new THREE.RawShaderMaterial(params);\n      break;\n\n    case 'shader':\n      scope._material = new THREE.ShaderMaterial(params);\n      break;\n\n    case 'spritecanvas':\n      scope._material = new THREE.SpriteCanvasMaterial(params);\n      break;\n\n    case 'sprite':\n      scope._material = new THREE.SpriteMaterial(params);\n      break;\n\n    default:\n  }\n\n  if (!!'physics') {\n    scope._materialP = Physijs.createMaterial(\n      scope._material,\n      scope._friction,\n      scope._restitution\n    );\n  }\n\n  return scope;\n};\n\nexport {\n  FontLoader,\n  JSONLoader,\n  TextureLoader,\n  texture,\n  extend,\n  loadMaterial\n};\n"]}