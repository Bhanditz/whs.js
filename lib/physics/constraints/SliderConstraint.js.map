{"version":3,"sources":["physics/constraints/SliderConstraint.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;;;;IAEa,gB,WAAA,gB;AACX,4BAAY,OAAZ,EAAqB,OAArB,EAA8B,QAA9B,EAAwC,IAAxC,EAA8C;AAAA;;AAC5C,QAAI,SAAS,SAAb,EAAwB;AACtB,aAAO,QAAP;AACA,iBAAW,OAAX;AACA,gBAAU,SAAV;AACD;;AAED,SAAK,IAAL,GAAY,QAAZ;AACA,SAAK,cAAL,GAAsB,CAAtB;AACA,SAAK,EAAL,GAAU,uBAAV;AACA,SAAK,KAAL,GAAa,QAAQ,MAArB;AACA,SAAK,OAAL,GAAe,QAAQ,QAAR,CAAiB,EAAhC;AACA,SAAK,SAAL,GAAiB,uCAA6B,QAA7B,EAAuC,OAAvC,EAAgD,KAAhD,EAAjB;AACA,SAAK,IAAL,GAAY,IAAZ;;AAEA,QAAI,OAAJ,EAAa;AACX,WAAK,OAAL,GAAe,QAAQ,QAAR,CAAiB,EAAhC;AACA,WAAK,SAAL,GAAiB,uCAA6B,QAA7B,EAAuC,OAAvC,EAAgD,KAAhD,EAAjB;AACD;AACF;;;;oCAEe;AACd,aAAO;AACL,cAAM,KAAK,IADN;AAEL,YAAI,KAAK,EAFJ;AAGL,iBAAS,KAAK,OAHT;AAIL,iBAAS,KAAK,OAJT;AAKL,mBAAW,KAAK,SALX;AAML,mBAAW,KAAK,SANX;AAOL,cAAM,KAAK;AAPN,OAAP;AASD;;;8BAES,S,EAAW,S,EAAW,S,EAAW,S,EAAW;AACpD,WAAK,KAAL,CAAW,OAAX,CAAmB,kBAAnB,EAAuC;AACrC,oBAAY,KAAK,EADoB;AAErC,4BAFqC;AAGrC,4BAHqC;AAIrC,4BAJqC;AAKrC;AALqC,OAAvC;AAOD;;;mCAEc,M,EAAQ,O,EAAS;AAC9B,WAAK,KAAL,CAAW,OAAX,CACE,uBADF,EAEE;AACE,oBAAY,KAAK,EADnB;AAEE,sBAFF;AAGE;AAHF,OAFF;AAQD;;;sCAEiB,Q,EAAU,Y,EAAc;AACxC,WAAK,KAAL,CAAW,OAAX,CAAmB,0BAAnB,EAA+C;AAC7C,oBAAY,KAAK,EAD4B;AAE7C,0BAF6C;AAG7C;AAH6C,OAA/C;AAKD;;;yCAEoB;AACnB,WAAK,KAAL,CAAW,OAAX,CAAmB,2BAAnB,EAAgD,EAAC,YAAY,KAAK,EAAlB,EAAhD;AACD;;;uCAEkB,Q,EAAU,Y,EAAc;AACzC,WAAK,KAAL,CAAW,OAAX,CAAmB,2BAAnB,EAAgD;AAC9C,oBAAY,KAAK,EAD6B;AAE9C,0BAF8C;AAG9C;AAH8C,OAAhD;AAKD;;;0CAEqB;AACpB,WAAK,KAAL,CAAW,OAAX,CAAmB,4BAAnB,EAAiD,EAAC,YAAY,KAAK,EAAlB,EAAjD;AACD","file":"SliderConstraint.js","sourcesContent":["import {convertWorldPositionToObject, getObjectId} from '../api';\n\nexport class SliderConstraint {\n  constructor(objecta, objectb, position, axis) {\n    if (axis === undefined) {\n      axis = position;\n      position = objectb;\n      objectb = undefined;\n    }\n\n    this.type = 'slider';\n    this.appliedImpulse = 0;\n    this.id = getObjectId();\n    this.scene = objecta.parent;\n    this.objecta = objecta._physijs.id;\n    this.positiona = convertWorldPositionToObject(position, objecta).clone();\n    this.axis = axis;\n\n    if (objectb) {\n      this.objectb = objectb._physijs.id;\n      this.positionb = convertWorldPositionToObject(position, objectb).clone();\n    }\n  }\n\n  getDefinition() {\n    return {\n      type: this.type,\n      id: this.id,\n      objecta: this.objecta,\n      objectb: this.objectb,\n      positiona: this.positiona,\n      positionb: this.positionb,\n      axis: this.axis\n    };\n  }\n\n  setLimits(lin_lower, lin_upper, ang_lower, ang_upper) {\n    this.scene.execute('slider_setLimits', {\n      constraint: this.id,\n      lin_lower,\n      lin_upper,\n      ang_lower,\n      ang_upper\n    });\n  }\n\n  setRestitution(linear, angular) {\n    this.scene.execute(\n      'slider_setRestitution',\n      {\n        constraint: this.id,\n        linear,\n        angular\n      }\n    );\n  }\n\n  enableLinearMotor(velocity, acceleration) {\n    this.scene.execute('slider_enableLinearMotor', {\n      constraint: this.id,\n      velocity,\n      acceleration\n    });\n  }\n\n  disableLinearMotor() {\n    this.scene.execute('slider_disableLinearMotor', {constraint: this.id});\n  }\n\n  enableAngularMotor(velocity, acceleration) {\n    this.scene.execute('slider_enableAngularMotor', {\n      constraint: this.id,\n      velocity,\n      acceleration\n    });\n  }\n\n  disableAngularMotor() {\n    this.scene.execute('slider_disableAngularMotor', {constraint: this.id});\n  }\n}\n"]}