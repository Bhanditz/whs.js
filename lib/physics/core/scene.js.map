{"version":3,"sources":["physics/core/scene.js"],"names":[],"mappings":"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","file":"scene.js","sourcesContent":["import * as THREE from 'three';\nimport Worker from 'inline-worker';\nimport Stats from 'stats.js';\nimport {Eventable} from '../eventable';\nimport {\n  addObjectChildren,\n  MESSAGE_TYPES,\n  temp1Vector3,\n  temp1Matrix4,\n  REPORT_ITEMSIZE,\n  COLLISIONREPORT_ITEMSIZE,\n  VEHICLEREPORT_ITEMSIZE,\n  CONSTRAINTREPORT_ITEMSIZE\n} from '../api';\n\nexport class Scene extends THREE.Scene {\n  constructor(params = {}, init = {}) {\n    super();\n\n    Object.assign(this, new Eventable());\n    Eventable.make(Scene);\n\n    this._worker = new Worker(require('../worker.js'));\n    this._worker.transferableMessage = this._worker.webkitPostMessage || this._worker.postMessage;\n    this._materials_ref_counts = {};\n    this._objects = {};\n    this._vehicles = {};\n    this._constraints = {};\n    this._is_simulating = false;\n\n    const ab = new ArrayBuffer(1);\n    this._worker.transferableMessage(ab, [ab]);\n    this.SUPPORT_TRANSFERABLE = (ab.byteLength === 0);\n\n    this._worker.onmessage = (event) => {\n      let _temp,\n        data = event.data;\n\n      if (data instanceof ArrayBuffer && data.byteLength !== 1)// byteLength === 1 is the worker making a SUPPORT_TRANSFERABLE test\n        data = new Float32Array(data);\n\n      if (data instanceof Float32Array) {\n        // transferable object\n        switch (data[0]) {\n          case MESSAGE_TYPES.WORLDREPORT:\n            this._updateScene(data);\n            break;\n\n          case MESSAGE_TYPES.SOFTREPORT:\n            this._updateSoftbodies(data);\n            break;\n\n          case MESSAGE_TYPES.COLLISIONREPORT:\n            this._updateCollisions(data);\n            break;\n\n          case MESSAGE_TYPES.VEHICLEREPORT:\n            this._updateVehicles(data);\n            break;\n\n          case MESSAGE_TYPES.CONSTRAINTREPORT:\n            this._updateConstraints(data);\n            break;\n          default:\n        }\n      } else if (data.cmd) {\n        // non-transferable object\n        switch (data.cmd) {\n          case 'objectReady':\n            _temp = data.params;\n            if (this._objects[_temp]) this._objects[_temp].dispatchEvent('ready');\n            break;\n\n          case 'worldReady':\n            this.dispatchEvent('ready');\n            break;\n\n          case 'vehicle':\n            window.test = data;\n            break;\n\n          default:\n            // Do nothing, just show the message\n            console.debug(`Received: ${data.cmd}`);\n            console.dir(data.params);\n            break;\n        }\n      } else {\n        switch (data[0]) {\n          case MESSAGE_TYPES.WORLDREPORT:\n            this._updateScene(data);\n            break;\n\n          case MESSAGE_TYPES.COLLISIONREPORT:\n            this._updateCollisions(data);\n            break;\n\n          case MESSAGE_TYPES.VEHICLEREPORT:\n            this._updateVehicles(data);\n            break;\n\n          case MESSAGE_TYPES.CONSTRAINTREPORT:\n            this._updateConstraints(data);\n            break;\n          default:\n        }\n      }\n    };\n\n    params.fixedTimeStep = params.fixedTimeStep || 1 / 60;\n    params.rateLimit = params.rateLimit || true;\n\n    params.whs = {\n      softbody: init.softbody\n    };\n\n    this._stats = init.stats ? new Stats() : false;\n    this._world = init.world || false;\n\n    if (this._stats) {\n      this._stats.setMode(0);\n      this._stats.domElement.style.position = 'absolute';\n      this._stats.domElement.style.left = '0px';\n      this._stats.domElement.style.top = '48px';\n\n      this._world._dom.appendChild(this._stats.domElement);\n    }\n\n    this.execute('init', params);\n  }\n\n  _updateScene(data) {\n    let index = data[1];\n\n    while (index--) {\n      const offset = 2 + index * REPORT_ITEMSIZE;\n      const object = this._objects[data[offset]];\n\n      if (object === undefined) continue;\n\n      if (object.__dirtyPosition === false) {\n        object.position.set(\n          data[offset + 1],\n          data[offset + 2],\n          data[offset + 3]\n        );\n      }\n\n      if (object.__dirtyRotation === false) {\n        object.quaternion.set(\n          data[offset + 4],\n          data[offset + 5],\n          data[offset + 6],\n          data[offset + 7]\n        );\n      }\n\n      object._physijs.linearVelocity.set(\n        data[offset + 8],\n        data[offset + 9],\n        data[offset + 10]\n      );\n\n      object._physijs.angularVelocity.set(\n        data[offset + 11],\n        data[offset + 12],\n        data[offset + 13]\n      );\n    }\n\n    if (this.SUPPORT_TRANSFERABLE)\n      this._worker.transferableMessage(data.buffer, [data.buffer]); // Give the typed array back to the worker\n\n    this._is_simulating = false;\n    this.dispatchEvent('update');\n  }\n\n  _updateSoftbodies(data) {\n    let index = data[1],\n      offset = 2;\n\n    while (index--) {\n      const size = data[offset + 1];\n      const object = this._objects[data[offset]];\n      const association = object._physijs.aIdxAssoc;\n      const attributes = object.geometry.attributes;\n\n      const volumePositions = attributes.position.array;\n      const volumeNormals = attributes.normal.array;\n\n      const offsetVert = offset + 2;\n\n      for (let i = 0; i < size; i++) {\n        const x = data[offsetVert + i * 6];\n        const y = data[offsetVert + i * 6 + 1];\n        const z = data[offsetVert + i * 6 + 2];\n\n        const nx = data[offsetVert + i * 6 + 3];\n        const ny = data[offsetVert + i * 6 + 4];\n        const nz = data[offsetVert + i * 6 + 5];\n\n        const assocVertex = association[i];\n\n        for (let k = 0, kl = assocVertex.length; k < kl; k++) {\n          let indexVertex = assocVertex[k];\n\n          volumePositions[indexVertex] = x;\n          volumeNormals[indexVertex] = nx;\n          indexVertex++;\n\n          volumePositions[indexVertex] = y;\n          volumeNormals[indexVertex] = ny;\n          indexVertex++;\n\n          volumePositions[indexVertex] = z;\n          volumeNormals[indexVertex] = nz;\n        }\n      }\n\n      attributes.position.needsUpdate = true;\n      attributes.normal.needsUpdate = true;\n\n      offset += 2 + size * 6;\n    }\n\n    // if (this.SUPPORT_TRANSFERABLE)\n    //   this._worker.transferableMessage(data.buffer, [data.buffer]); // Give the typed array back to the worker\n\n    this._is_simulating = false;\n  }\n\n  _updateVehicles(data) {\n    let vehicle, wheel;\n\n    for (let i = 0; i < (data.length - 1) / VEHICLEREPORT_ITEMSIZE; i++) {\n      const offset = 1 + i * VEHICLEREPORT_ITEMSIZE;\n      vehicle = this._vehicles[data[offset]];\n\n      if (vehicle === undefined) continue;\n\n      wheel = vehicle.wheels[data[offset + 1]];\n\n      wheel.position.set(\n        data[offset + 2],\n        data[offset + 3],\n        data[offset + 4]\n      );\n\n      wheel.quaternion.set(\n        data[offset + 5],\n        data[offset + 6],\n        data[offset + 7],\n        data[offset + 8]\n      );\n    }\n\n    if (this.SUPPORT_TRANSFERABLE)\n      this._worker.transferableMessage(data.buffer, [data.buffer]); // Give the typed array back to the worker\n  }\n\n  _updateConstraints(data) {\n    let constraint, object;\n\n    for (let i = 0; i < (data.length - 1) / CONSTRAINTREPORT_ITEMSIZE; i++) {\n      const offset = 1 + i * CONSTRAINTREPORT_ITEMSIZE;\n      constraint = this._constraints[data[offset]];\n      object = this._objects[data[offset + 1]];\n\n      if (constraint === undefined || object === undefined) continue;\n\n      temp1Vector3.set(\n        data[offset + 2],\n        data[offset + 3],\n        data[offset + 4]\n      );\n\n      temp1Matrix4.extractRotation(object.matrix);\n      temp1Vector3.applyMatrix4(temp1Matrix4);\n\n      constraint.positiona.addVectors(object.position, temp1Vector3);\n      constraint.appliedImpulse = data[offset + 5];\n    }\n\n    if (this.SUPPORT_TRANSFERABLE)\n      this._worker.transferableMessage(data.buffer, [data.buffer]); // Give the typed array back to the worker\n  }\n\n  _updateCollisions(data) {\n    /**\n     * #TODO\n     * This is probably the worst way ever to handle collisions. The inherent evilness is a residual\n     * effect from the previous version's evilness which mutated when switching to transferable objects.\n     *\n     * If you feel inclined to make this better, please do so.\n     */\n\n    const collisions = {},\n      normal_offsets = {};\n\n    // Build collision manifest\n    for (let i = 0; i < data[1]; i++) {\n      const offset = 2 + i * COLLISIONREPORT_ITEMSIZE;\n      const object = data[offset];\n      const object2 = data[offset + 1];\n\n      normal_offsets[`${object}-${object2}`] = offset + 2;\n      normal_offsets[`${object2}-${object}`] = -1 * (offset + 2);\n\n      // Register collisions for both the object colliding and the object being collided with\n      if (!collisions[object]) collisions[object] = [];\n      collisions[object].push(object2);\n\n      if (!collisions[object2]) collisions[object2] = [];\n      collisions[object2].push(object);\n    }\n\n    // Deal with collisions\n    for (const id1 in this._objects) {\n      if (!this._objects.hasOwnProperty(id1)) continue;\n      const object = this._objects[id1];\n\n      // If object touches anything, ...\n      if (collisions[id1]) {\n        // Clean up touches array\n        for (let j = 0; j < object._physijs.touches.length; j++) {\n          if (collisions[id1].indexOf(object._physijs.touches[j]) === -1)\n            object._physijs.touches.splice(j--, 1);\n        }\n\n        // Handle each colliding object\n        for (let j = 0; j < collisions[id1].length; j++) {\n          const id2 = collisions[id1][j];\n          const object2 = this._objects[id2];\n\n          if (object2) {\n            // If object was not already touching object2, notify object\n            if (object._physijs.touches.indexOf(id2) === -1) {\n              object._physijs.touches.push(id2);\n\n              temp1Vector3.subVectors(object.getLinearVelocity(), object2.getLinearVelocity());\n              const temp1 = temp1Vector3.clone();\n\n              temp1Vector3.subVectors(object.getAngularVelocity(), object2.getAngularVelocity());\n              const temp2 = temp1Vector3.clone();\n\n              let normal_offset = normal_offsets[`${object._physijs.id}-${object2._physijs.id}`];\n\n              if (normal_offset > 0) {\n                temp1Vector3.set(\n                  -data[normal_offset],\n                  -data[normal_offset + 1],\n                  -data[normal_offset + 2]\n                );\n              } else {\n                normal_offset *= -1;\n\n                temp1Vector3.set(\n                  data[normal_offset],\n                  data[normal_offset + 1],\n                  data[normal_offset + 2]\n                );\n              }\n\n              object.dispatchEvent('collision', object2, temp1, temp2, temp1Vector3);\n            }\n          }\n        }\n      } else object._physijs.touches.length = 0; // not touching other objects\n    }\n\n    this.collisions = collisions;\n\n    if (this.SUPPORT_TRANSFERABLE)\n      this._worker.transferableMessage(data.buffer, [data.buffer]); // Give the typed array back to the worker\n  }\n\n  addConstraint(constraint, show_marker) {\n    this._constraints[constraint.id] = constraint;\n    this.execute('addConstraint', constraint.getDefinition());\n\n    if (show_marker) {\n      let marker;\n\n      switch (constraint.type) {\n        case 'point':\n          marker = new THREE.Mesh(\n            new THREE.SphereGeometry(1.5),\n            new THREE.MeshNormalMaterial()\n          );\n\n          marker.position.copy(constraint.positiona);\n          this._objects[constraint.objecta].add(marker);\n          break;\n\n        case 'hinge':\n          marker = new THREE.Mesh(\n            new THREE.SphereGeometry(1.5),\n            new THREE.MeshNormalMaterial()\n          );\n\n          marker.position.copy(constraint.positiona);\n          this._objects[constraint.objecta].add(marker);\n          break;\n\n        case 'slider':\n          marker = new THREE.Mesh(\n            new THREE.BoxGeometry(10, 1, 1),\n            new THREE.MeshNormalMaterial()\n          );\n\n          marker.position.copy(constraint.positiona);\n\n          // This rotation isn't right if all three axis are non-0 values\n          // TODO: change marker's rotation order to ZYX\n          marker.rotation.set(\n            constraint.axis.y, // yes, y and\n            constraint.axis.x, // x axis are swapped\n            constraint.axis.z\n          );\n          this._objects[constraint.objecta].add(marker);\n          break;\n\n        case 'conetwist':\n          marker = new THREE.Mesh(\n            new THREE.SphereGeometry(1.5),\n            new THREE.MeshNormalMaterial()\n          );\n\n          marker.position.copy(constraint.positiona);\n          this._objects[constraint.objecta].add(marker);\n          break;\n\n        case 'dof':\n          marker = new THREE.Mesh(\n            new THREE.SphereGeometry(1.5),\n            new THREE.MeshNormalMaterial()\n          );\n\n          marker.position.copy(constraint.positiona);\n          this._objects[constraint.objecta].add(marker);\n          break;\n        default:\n      }\n    }\n\n    return constraint;\n  }\n\n  onSimulationResume() {\n    this.execute('onSimulationResume', {});\n  }\n\n  removeConstraint(constraint) {\n    if (this._constraints[constraint.id] !== undefined) {\n      this.execute('removeConstraint', {id: constraint.id});\n      delete this._constraints[constraint.id];\n    }\n  }\n\n  execute(cmd, params) {\n    this._worker.postMessage({cmd, params});\n  }\n\n  add(object) {\n    THREE.Mesh.prototype.add.call(this, object);\n\n    if (object._physijs) {\n      object.world = this;\n\n      if (object instanceof Physijs.Vehicle) {\n        this.add(object.mesh);\n        this._vehicles[object._physijs.id] = object;\n        this.execute('addVehicle', object._physijs);\n      } else {\n        object.__dirtyPosition = false;\n        object.__dirtyRotation = false;\n        this._objects[object._physijs.id] = object;\n\n        if (object.children.length) {\n          object._physijs.children = [];\n          addObjectChildren(object, object);\n        }\n\n        if (object.material._physijs) {\n          if (this._materials_ref_counts.hasOwnProperty(object.material._physijs.id))\n            this._materials_ref_counts[object.material._physijs.id]++;\n          else {\n            this.execute('registerMaterial', object.material._physijs);\n            object._physijs.materialId = object.material._physijs.id;\n            this._materials_ref_counts[object.material._physijs.id] = 1;\n          }\n        }\n\n        // Object starting position + rotation\n        object._physijs.position = {\n          x: object.position.x,\n          y: object.position.y,\n          z: object.position.z\n        };\n\n        object._physijs.rotation = {\n          x: object.quaternion.x,\n          y: object.quaternion.y,\n          z: object.quaternion.z,\n          w: object.quaternion.w\n        };\n\n        // Check for scaling\n        // var mass_scaling = new THREE.Vector3(1, 1, 1);\n\n        if (object._physijs.width) object._physijs.width *= object.scale.x;\n        if (object._physijs.height) object._physijs.height *= object.scale.y;\n        if (object._physijs.depth) object._physijs.depth *= object.scale.z;\n\n        this.execute('addObject', object._physijs);\n      }\n    }\n  }\n\n  remove(object) {\n    if (object instanceof Physijs.Vehicle) {\n      this.execute('removeVehicle', {id: object._physijs.id});\n      while (object.wheels.length) this.remove(object.wheels.pop());\n\n      this.remove(object.mesh);\n      this._vehicles[object._physijs.id] = null;\n    } else {\n      THREE.Mesh.prototype.remove.call(this, object);\n\n      if (object._physijs) {\n        this._objects[object._physijs.id] = null;\n        this.execute('removeObject', {id: object._physijs.id});\n      }\n    }\n    if (object.material && object.material._physijs && this._materials_ref_counts.hasOwnProperty(object.material._physijs.id)) {\n      this._materials_ref_counts[object.material._physijs.id]--;\n\n      if (this._materials_ref_counts[object.material._physijs.id] === 0) {\n        this.execute('unRegisterMaterial', object.material._physijs);\n        this._materials_ref_counts[object.material._physijs.id] = null;\n      }\n    }\n  }\n\n  setFixedTimeStep(fixedTimeStep) {\n    if (fixedTimeStep) this.execute('setFixedTimeStep', fixedTimeStep);\n  }\n\n  setGravity(gravity) {\n    if (gravity) this.execute('setGravity', gravity);\n  }\n\n  simulate(timeStep, maxSubSteps) {\n    if (this._stats) this._stats.begin();\n\n    if (this._is_simulating) return false;\n\n    this._is_simulating = true;\n\n    for (const object_id in this._objects) {\n      if (!this._objects.hasOwnProperty(object_id)) continue;\n\n      const object = this._objects[object_id];\n\n      if (object.__dirtyPosition || object.__dirtyRotation) {\n        const update = {id: object._physijs.id};\n\n        if (object.__dirtyPosition) {\n          update.pos = {\n            x: object.position.x,\n            y: object.position.y,\n            z: object.position.z\n          };\n\n          if (object._physijs.type === 'softbody') object.position.set(0, 0, 0);\n\n          object.__dirtyPosition = false;\n        }\n\n        if (object.__dirtyRotation) {\n          update.quat = {\n            x: object.quaternion.x,\n            y: object.quaternion.y,\n            z: object.quaternion.z,\n            w: object.quaternion.w\n          };\n\n          if (object._physijs.type === 'softbody') object.rotation.set(0, 0, 0);\n\n          object.__dirtyRotation = false;\n        }\n\n        this.execute('updateTransform', update);\n      }\n    }\n\n    this.execute('simulate', {timeStep, maxSubSteps});\n\n    if (this._stats) this._stats.end();\n    return true;\n  }\n}\n"]}