{"version":3,"sources":["physics/api.js"],"names":[],"mappings":"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","file":"api.js","sourcesContent":["import * as THREE from 'three';\n\nconst MESSAGE_TYPES = {\n  WORLDREPORT: 0,\n  COLLISIONREPORT: 1,\n  VEHICLEREPORT: 2,\n  CONSTRAINTREPORT: 3\n};\n\nconst REPORT_ITEMSIZE = 14,\n  COLLISIONREPORT_ITEMSIZE = 5,\n  VEHICLEREPORT_ITEMSIZE = 9,\n  CONSTRAINTREPORT_ITEMSIZE = 6;\n\nconst temp1Vector3 = new THREE.Vector3(),\n  temp2Vector3 = new THREE.Vector3(),\n  temp1Matrix4 = new THREE.Matrix4(),\n  temp1Quat = new THREE.Quaternion();\n\nconst getEulerXYZFromQuaternion = (x, y, z, w) => {\n  return new THREE.Vector3(\n    Math.atan2(2 * (x * w - y * z), (w * w - x * x - y * y + z * z)),\n    Math.asin(2 * (x * z + y * w)),\n    Math.atan2(2 * (z * w - x * y), (w * w + x * x - y * y - z * z))\n  );\n};\n\nconst createMaterial = (material, friction, restitution) => {\n  let physijs_material = function () {\n  };\n\n  physijs_material.prototype = material;\n  physijs_material = new physijs_material();\n\n  physijs_material._physijs = {\n    id: material.id,\n    friction: friction === undefined ? 0.8 : friction,\n    restitution: restitution === undefined ? 0.2 : restitution\n  };\n\n  return physijs_material;\n}\n\nconst getQuatertionFromEuler = (x, y, z) => {\n  const c1 = Math.cos(y);\n  const s1 = Math.sin(y);\n  const c2 = Math.cos(-z);\n  const s2 = Math.sin(-z);\n  const c3 = Math.cos(x);\n  const s3 = Math.sin(x);\n  const c1c2 = c1 * c2;\n  const s1s2 = s1 * s2;\n\n  return {\n    w: c1c2 * c3 - s1s2 * s3,\n    x: c1c2 * s3 + s1s2 * c3,\n    y: s1 * c2 * c3 + c1 * s2 * s3,\n    z: c1 * s2 * c3 - s1 * c2 * s3\n  };\n};\n\nconst convertWorldPositionToObject = (position, object) => {\n  temp1Matrix4.identity(); // reset temp matrix\n\n  // Set the temp matrix's rotation to the object's rotation\n  temp1Matrix4.identity().makeRotationFromQuaternion(object.quaternion);\n\n  // Invert rotation matrix in order to \"unrotate\" a point back to object space\n  temp1Matrix4.getInverse(temp1Matrix4);\n\n  // Yay! Temp vars!\n  temp1Vector3.copy(position);\n  temp2Vector3.copy(object.position);\n\n  // Apply the rotation\n  return temp1Vector3.sub(temp2Vector3).applyMatrix4(temp1Matrix4);\n};\n\nconst addObjectChildren = function (parent, object) {\n  for (let i = 0; i < object.children.length; i++) {\n    if (object.children[i]._physijs) {\n      object.children[i].updateMatrix();\n      object.children[i].updateMatrixWorld();\n\n      temp1Vector3.setFromMatrixPosition(object.children[i].matrixWorld);\n      temp1Quat.setFromRotationMatrix(object.children[i].matrixWorld);\n\n      object.children[i]._physijs.position_offset = {\n        x: temp1Vector3.x,\n        y: temp1Vector3.y,\n        z: temp1Vector3.z\n      };\n\n      object.children[i]._physijs.rotation = {\n        x: temp1Quat.x,\n        y: temp1Quat.y,\n        z: temp1Quat.z,\n        w: temp1Quat.w\n      };\n\n      parent._physijs.children.push(object.children[i]._physijs);\n    }\n\n    addObjectChildren(parent, object.children[i]);\n  }\n};\n\nconst getObjectId = (() => {\n  let _id = 1;\n  return () => {\n    return _id++;\n  };\n})();\n\nexport {\n  getEulerXYZFromQuaternion,\n  getQuatertionFromEuler,\n  convertWorldPositionToObject,\n  getObjectId,\n  addObjectChildren,\n  createMaterial,\n\n  MESSAGE_TYPES,\n  REPORT_ITEMSIZE,\n  COLLISIONREPORT_ITEMSIZE,\n  VEHICLEREPORT_ITEMSIZE,\n  CONSTRAINTREPORT_ITEMSIZE,\n\n  temp1Vector3,\n  temp2Vector3,\n  temp1Matrix4,\n  temp1Quat\n};\n"]}