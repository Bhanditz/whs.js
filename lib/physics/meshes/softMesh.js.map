{"version":3,"sources":["physics/meshes/softMesh.js"],"names":[],"mappings":"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","file":"softMesh.js","sourcesContent":["import {Mesh} from '../core/mesh';\n\nexport class SoftMesh extends Mesh {\n  constructor(geometry, material, params = {}) {\n    console.log(geometry);\n    const tempGeometry = geometry.clone();\n\n    if (!(geometry instanceof THREE.BufferGeometry)) // Converts to BufferGeometry.\n      geometry = new THREE.BufferGeometry().fromGeometry(geometry);\n\n    super(geometry, material, params.mass);\n\n    tempGeometry.mergeVertices();\n    const idxGeometry = this.createIndexedBufferGeometryFromGeometry(tempGeometry);\n    if (!tempGeometry.boundingBox) tempGeometry.computeBoundingBox();\n    this.tempGeometry = tempGeometry;\n\n    const aVertices = idxGeometry.attributes.position.array;\n    const aIndices = idxGeometry.index.array;\n    const aIdxAssoc = [];\n    const vertices = geometry.attributes.position.array;\n\n    const numIdxVertices = aVertices.length / 3;\n    const numVertices = vertices.length / 3;\n\n    for (let i = 0; i < numIdxVertices; i++) {\n      const association = [];\n      aIdxAssoc.push(association);\n\n      const i3 = i * 3;\n\n      for (let j = 0; j < numVertices; j++) {\n        const j3 = j * 3;\n\n        if (this.isEqual(aVertices[i3], aVertices[i3 + 1], aVertices[i3 + 2], vertices[j3], vertices[j3 + 1], vertices[j3 + 2]))\n          association.push(j3);\n      }\n    }\n\n    const width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n    const height = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\n    const depth = geometry.boundingBox.max.z - geometry.boundingBox.min.z;\n\n    this._physijs.type = 'softbody';\n    this._physijs.aVertices = aVertices;\n    this._physijs.aIndices = aIndices;\n    this._physijs.aIdxAssoc = aIdxAssoc;\n\n    const physParams = params.physics;\n\n    this._physijs.params = {\n      friction: physParams.friction,\n      damping: physParams.damping,\n      pressure: physParams.pressure,\n      margin: physParams.margin\n    };\n\n    this._physijs.mass = (typeof params.mass === 'undefined') ? width * height * depth : params.mass;\n  }\n\n  createIndexedBufferGeometryFromGeometry(geometry) {\n    const numVertices = geometry.vertices.length;\n    const numFaces = geometry.faces.length;\n    const bufferGeom = new THREE.BufferGeometry();\n    const vertices = new Float32Array(numVertices * 3);\n    const indices = new (numFaces * 3 > 65535 ? Uint32Array : Uint16Array)(numFaces * 3);\n\n    for (let i = 0; i < numVertices; i++) {\n      const p = geometry.vertices[i];\n      const i3 = i * 3;\n\n      vertices[i3] = p.x;\n      vertices[i3 + 1] = p.y;\n      vertices[i3 + 2] = p.z;\n    }\n\n    for (let i = 0; i < numFaces; i++) {\n      const f = geometry.faces[i];\n      const i3 = i * 3;\n\n      indices[i3] = f.a;\n      indices[i3 + 1] = f.b;\n      indices[i3 + 2] = f.c;\n    }\n\n    bufferGeom.setIndex(new THREE.BufferAttribute(indices, 1));\n    bufferGeom.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\n    return bufferGeom;\n  }\n\n  isEqual(x1, y1, z1, x2, y2, z2) {\n    const delta = 0.000001;\n\n    return Math.abs(x2 - x1) < delta\n      && Math.abs(y2 - y1) < delta\n      && Math.abs(z2 - z1) < delta;\n  }\n}\n"]}