{"version":3,"sources":["physics/meshes/concaveMesh.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;IAEa,W,WAAA,W;;;AACX,uBAAY,IAAZ,EAAkB,QAAlB,EAA4B,IAA5B,EAAkC,SAAlC,EAA6C,MAA7C,EAAqD;AAAA;;AACnD,QAAM,WAAW,YAAY,SAAZ,GAAwB,IAAzC;AAAA,QACE,YAAY,IAAI,KAAJ,CAAU,SAAS,KAAT,CAAe,MAAzB,CADd;;AADmD,6GAI7C,IAJ6C,EAIvC,QAJuC,EAI7B,IAJ6B;;AAMnD,QAAI,CAAC,SAAS,WAAd,EAA2B,SAAS,kBAAT;;AAE3B,aAAS,UAAU,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAa,GAAG,CAAhB,EAAnB;AACA,WAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;AACA,WAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;AACA,WAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;;AAEA,QAAM,WAAW,SAAS,QAA1B;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,KAAT,CAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,UAAM,OAAO,SAAS,KAAT,CAAe,CAAf,CAAb;;AAEA,gBAAU,CAAV,IAAe,CACb,EAAC,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAAhC,EAAmC,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAAlE,EAAqE,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAApG,EADa,EAEb,EAAC,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAAhC,EAAmC,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAAlE,EAAqE,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAApG,EAFa,EAGb,EAAC,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAAhC,EAAmC,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAAlE,EAAqE,GAAG,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAApG,EAHa,CAAf;AAKD;;AAED,QAAM,QAAQ,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAAzB,GAA6B,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAApE;AACA,QAAM,SAAS,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAAzB,GAA6B,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAArE;AACA,QAAM,QAAQ,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAAzB,GAA6B,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAApE;;AAEA,UAAK,QAAL,CAAc,IAAd,GAAqB,SAArB;AACA,UAAK,QAAL,CAAc,SAAd,GAA0B,SAA1B;AACA,UAAK,QAAL,CAAc,IAAd,GAAsB,OAAO,IAAP,KAAgB,WAAjB,GAAgC,QAAQ,MAAR,GAAiB,KAAjD,GAAyD,IAA9E;AA/BmD;AAgCpD","file":"concaveMesh.js","sourcesContent":["import {Mesh} from '../core/mesh';\n\nexport class ConcaveMesh extends Mesh {\n  constructor(geom, material, mass, cGeometry, cScale) {\n    const geometry = cGeometry ? cGeometry : geom,\n      triangles = new Array(geometry.faces.length);\n\n    super(geom, material, mass);\n\n    if (!geometry.boundingBox) geometry.computeBoundingBox();\n\n    cScale = cScale || {x: 1, y: 1, z: 1};\n    cScale.x = cScale.x || 1;\n    cScale.y = cScale.y || 1;\n    cScale.z = cScale.z || 1;\n\n    const vertices = geometry.vertices;\n\n    for (let i = 0; i < geometry.faces.length; i++) {\n      const face = geometry.faces[i];\n\n      triangles[i] = [\n        {x: vertices[face.a].x * cScale.x, y: vertices[face.a].y * cScale.y, z: vertices[face.a].z * cScale.z},\n        {x: vertices[face.b].x * cScale.x, y: vertices[face.b].y * cScale.y, z: vertices[face.b].z * cScale.z},\n        {x: vertices[face.c].x * cScale.x, y: vertices[face.c].y * cScale.y, z: vertices[face.c].z * cScale.z}\n      ];\n    }\n\n    const width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n    const height = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\n    const depth = geometry.boundingBox.max.z - geometry.boundingBox.min.z;\n\n    this._physijs.type = 'concave';\n    this._physijs.triangles = triangles;\n    this._physijs.mass = (typeof mass === 'undefined') ? width * height * depth : mass;\n  }\n}\n"]}