{"version":3,"sources":["physics/meshes/concaveMesh.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;IAEa,W,WAAA,W;;;AACX,yBAAY,IAAZ,EAAkB,QAAlB,EAA4B,IAA5B,EAAkC,SAAlC,EAA6C,MAA7C,EAAqD;AAAA;;AACnD,YAAM,WAAW,YAAY,SAAZ,GAAwB,IAAzC;AAAA,YACE,OAAO,IAAI,YAAJ,CAAiB,SAAS,KAAT,CAAe,MAAf,GAAwB,CAAzC,CADT;;AADmD,iHAI7C,IAJ6C,EAIvC,QAJuC,EAI7B,IAJ6B;;AAMnD,YAAI,CAAC,SAAS,WAAd,EAA2B,SAAS,kBAAT;;AAE3B,iBAAS,UAAU,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAa,GAAG,CAAhB,EAAnB;AACA,eAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;AACA,eAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;AACA,eAAO,CAAP,GAAW,OAAO,CAAP,IAAY,CAAvB;;AAEA,YAAM,WAAW,SAAS,QAA1B;;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,SAAS,KAAT,CAAe,MAAnC,EAA2C,GAA3C,EAAgD;AAC9C,gBAAM,OAAO,SAAS,KAAT,CAAe,CAAf,CAAb;;AAEA,iBAAK,IAAI,CAAT,IAAc,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA1C;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;;AAEA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;;AAEA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;AACA,iBAAK,IAAI,CAAJ,GAAQ,CAAb,IAAkB,SAAS,KAAK,CAAd,EAAiB,CAAjB,GAAqB,OAAO,CAA9C;AACD;;AAED,YAAM,QAAQ,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAAzB,GAA6B,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAApE;AACA,YAAM,SAAS,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAAzB,GAA6B,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAArE;AACA,YAAM,QAAQ,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAAzB,GAA6B,SAAS,WAAT,CAAqB,GAArB,CAAyB,CAApE;;AAEA,cAAK,QAAL,CAAc,IAAd,GAAqB,SAArB;AACA,cAAK,QAAL,CAAc,IAAd,GAAqB,IAArB;AACA,cAAK,QAAL,CAAc,IAAd,GAAsB,OAAO,IAAP,KAAgB,WAAjB,GAAgC,QAAQ,MAAR,GAAiB,KAAjD,GAAyD,IAA9E;AArCmD;AAsCpD","file":"concaveMesh.js","sourcesContent":["import {Mesh} from '../core/mesh';\r\n\r\nexport class ConcaveMesh extends Mesh {\r\n  constructor(geom, material, mass, cGeometry, cScale) {\r\n    const geometry = cGeometry ? cGeometry : geom,\r\n      data = new Float32Array(geometry.faces.length * 9);\r\n\r\n    super(geom, material, mass);\r\n\r\n    if (!geometry.boundingBox) geometry.computeBoundingBox();\r\n\r\n    cScale = cScale || {x: 1, y: 1, z: 1};\r\n    cScale.x = cScale.x || 1;\r\n    cScale.y = cScale.y || 1;\r\n    cScale.z = cScale.z || 1;\r\n\r\n    const vertices = geometry.vertices;\r\n\r\n    for (let i = 0; i < geometry.faces.length; i++) {\r\n      const face = geometry.faces[i];\r\n\r\n      data[i * 9] = vertices[face.a].x * cScale.x;\r\n      data[i * 9 + 1] = vertices[face.a].y * cScale.y;\r\n      data[i * 9 + 2] = vertices[face.a].z * cScale.z;\r\n\r\n      data[i * 9 + 3] = vertices[face.b].x * cScale.x;\r\n      data[i * 9 + 4] = vertices[face.b].y * cScale.y;\r\n      data[i * 9 + 5] = vertices[face.b].z * cScale.z;\r\n\r\n      data[i * 9 + 6] = vertices[face.c].x * cScale.x;\r\n      data[i * 9 + 7] = vertices[face.c].y * cScale.y;\r\n      data[i * 9 + 8] = vertices[face.c].z * cScale.z;\r\n    }\r\n\r\n    const width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\r\n    const height = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\r\n    const depth = geometry.boundingBox.max.z - geometry.boundingBox.min.z;\r\n\r\n    this._physijs.type = 'concave';\r\n    this._physijs.data = data;\r\n    this._physijs.mass = (typeof mass === 'undefined') ? width * height * depth : mass;\r\n  }\r\n}\r\n"]}