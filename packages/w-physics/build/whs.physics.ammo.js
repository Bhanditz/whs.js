/* WhitestormJS Framework v3.0.0-dev.6 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory((global.WHS = global.WHS || {}, global.WHS.physics = global.WHS.physics || {}, global.WHS.physics.ammo = {})));
}(this, function (exports) { 'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var classCallCheck = _classCallCheck;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var createClass = _createClass;

  var WorldModule =
  /*#__PURE__*/
  function () {
    function WorldModule(options) {
      classCallCheck(this, WorldModule);

      this.engine = options.engine;
    }

    createClass(WorldModule, [{
      key: "setup",
      value: function setup(app, _ref) {
        var manager = _ref.manager;
      }
    }]);

    return WorldModule;
  }();

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var defineProperty = _defineProperty;

  var TARGET = typeof Symbol === 'undefined' ? '__target' : Symbol(),
      SCRIPT_TYPE = 'application/javascript',
      BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder,
      URL = window.URL || window.webkitURL,
      Worker = window.Worker;
  /**
   * Returns a wrapper around Web Worker code that is constructible.
   *
   * @function shimWorker
   *
   * @param { String }    filename    The name of the file
   * @param { Function }  fn          Function wrapping the code of the worker
   */

  function shimWorker(filename, fn) {
    return function ShimWorker(forceFallback) {
      var o = this;

      if (!fn) {
        return new Worker(filename);
      } else if (Worker && !forceFallback) {
        // Convert the function's inner code to a string to construct the worker
        var source = fn.toString().replace(/^function.+?{/, '').slice(0, -1),
            objURL = createSourceObject(source);
        this[TARGET] = new Worker(objURL);
        URL.revokeObjectURL(objURL);
        return this[TARGET];
      } else {
        var selfShim = {
          postMessage: function (m) {
            if (o.onmessage) {
              setTimeout(function () {
                o.onmessage({
                  data: m,
                  target: selfShim
                });
              });
            }
          }
        };
        fn.call(selfShim);

        this.postMessage = function (m) {
          setTimeout(function () {
            selfShim.onmessage({
              data: m,
              target: o
            });
          });
        };

        this.isThisThread = true;
      }
    };
  }

  if (Worker) {
    var testWorker,
        objURL = createSourceObject('self.onmessage = function () {}'),
        testArray = new Uint8Array(1);

    try {
      // No workers via blobs in Edge 12 and IE 11 and lower :(
      if (/(?:Trident|Edge)\/(?:[567]|12)/i.test(navigator.userAgent)) {
        throw new Error('Not available');
      }

      testWorker = new Worker(objURL); // Native browser on some Samsung devices throws for transferables, let's detect it

      testWorker.postMessage(testArray, [testArray.buffer]);
    } catch (e) {
      Worker = null;
    } finally {
      URL.revokeObjectURL(objURL);

      if (testWorker) {
        testWorker.terminate();
      }
    }
  }

  function createSourceObject(str) {
    try {
      return URL.createObjectURL(new Blob([str], {
        type: SCRIPT_TYPE
      }));
    } catch (e) {
      var blob = new BlobBuilder();
      blob.append(str);
      return URL.createObjectURL(blob.getBlob(type));
    }
  }

  var AmmoWorker = new shimWorker("./worker.js", function (window, document) {
    var self = this;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    var CMD = {
      INITIALIZE: 1,
      CREATE_OBJECT: 2
    };
    var transferableMessage = self.webkitPostMessage || self.postMessage;
    new (
    /*#__PURE__*/
    function () {
      function AmmoBackend() {
        var _this = this;

        _classCallCheck(this, AmmoBackend);

        self.onmessage = function (_ref) {
          var data = _ref.data;

          switch (data[0] || data.cmd) {
            case CMD.INITIALIZE:
              _this.initialize(data.data.path);

              transferableMessage(true);
              break;

            default:
          }
        };
      }

      _createClass(AmmoBackend, [{
        key: "initialize",
        value: function initialize(ammoPath) {
          importScripts(ammoPath);
        }
      }]);

      return AmmoBackend;
    }())();
  });

  var CMD = {
    INITIALIZE: 1,
    CREATE_OBJECT: 2
  };

  var AmmoEngine =
  /*#__PURE__*/
  function () {
    function AmmoEngine(options) {
      classCallCheck(this, AmmoEngine);

      defineProperty(this, "isShared", AmmoEngine.ArrayBuffer instanceof SharedArrayBuffer);

      this.worker = new AmmoWorker();
      this.worker.transferableMessage = this.worker.webkitPostMessage || this.worker.postMessage;
      this.send(CMD.INITIALIZE, options);
    }

    createClass(AmmoEngine, [{
      key: "send",
      value: function send(command, data) {
        if (Array.isArray(data)) {
          this.sendBuffer(command, data);
          return;
        }

        this.worker.transferableMessage({
          cmd: CMD.INITIALIZE,
          data: data
        });
      }
    }, {
      key: "sendBuffer",
      value: function sendBuffer(command) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var buffer = this.buffer = new AmmoEngine.ArrayBuffer(Float32Array.BYTES_PER_ELEMENT * (data.length + 1));
        var array = this.array = new Float32Array(buffer);
        array[0] = command;
        array.set(data, 1);
        this.worker.transferableMessage(array, buffer);
      }
    }]);

    return AmmoEngine;
  }();

  defineProperty(AmmoEngine, "CMD", CMD);

  defineProperty(AmmoEngine, "ArrayBuffer", SharedArrayBuffer || ArrayBuffer);

  exports.WorldModule = WorldModule;
  exports.AmmoEngine = AmmoEngine;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
